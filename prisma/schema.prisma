// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester{
  id String @id @default(uuid())
  year Int
  title String
  code String
  startMonth String
  endMonth String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students Student[]

  semesterRegistrations SemesterRegistrations[]

  // change table name 
  @@map("academic_semesters")
}

model AcademicFaculty {
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  academicDepartments AcademicDepartment[]

  students Student[]

  faculties Faculty []

  // change table name 
  @@map("academic_faculty")
}

model AcademicDepartment {
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  students Student[]

  faculties Faculty []

  // change table name 
  @@map("academic_departments")
}

model Student {
  id String @id @default(uuid())
  studentId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String
  contactNo String
  gender String
  bloodGrpup String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
  academicSemesterId String

  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])
  academicDepartmentId String

  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
  academicFacultyId String

  // change table name 
  @@map("students")
}

model Faculty {
  id String @id @default(uuid())
  facultyId String
  firstName String
  lastName String
  middleName String
  profileImage String
  email String
  contactNo String
  gender String
  bloodGrpup String
  designation String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicDepartment AcademicDepartment @relation(fields: [academicDepartmentId],references: [id])
  academicDepartmentId String

  academicFaculty AcademicFaculty @relation(fields: [academicFacultyId],references: [id])
  academicFacultyId String

  courses CourseFaculty[]

  // change table name 
  @@map("faculties")
}

model Building{
  id String @id @default(uuid())
  title String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rooms Room[]

  // change table name
  @@map("buildings")
}

model Room{
  id String @id @default(uuid())
  roomNumber String
  floor String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  building Building @relation(fields: [buildingId],references: [id])
  buildingId String

  @@map("rooms")

}

model Course {
  id String @id @default(uuid())
  title String
  code String
  credits Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

prerequisite CourseToPrerequisite[] @relation("CourseToPrerequisite")

prerequisiteFor CourseToPrerequisite[] @relation("PrerequisiteToCourse")

faculties CourseFaculty[]
  
  @@map("courses")

}

model CourseToPrerequisite {
  courseId String
  prerequisiteId String

  @@id([courseId,prerequisiteId])

course Course @relation(fields: [courseId],references: [id], name:"CourseToPrerequisite")

prerequisite Course @relation(fields: [prerequisiteId],references: [id], name:"PrerequisiteToCourse")

}

model CourseFaculty{
  courseId String
  course Course @relation(fields: [courseId], references: [id])

  facultyId String
  faculty Faculty @relation(fields: [facultyId],references: [id])

  @@id([courseId, facultyId])

  @@map("course_faculty")
}


model SemesterRegistrations {
  id String @id @default(uuid())
  startDate DateTime
  endDate DateTime
  status SemesterRegistrationStatus? @default(UPCOMING)
  minCredit Int @default(0)
  maxCredit Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicSemesterId String 
  academicSemester AcademicSemester @relation(fields: [academicSemesterId],references: [id])
  
  @@map("semester_registration")
}


enum SemesterRegistrationStatus{
  UPCOMING
  ONGOING
  ENDED
}